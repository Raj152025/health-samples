/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "com.example.healthconnectsample"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.majorVersion
        freeCompilerArgs = ['-Xjvm-default=all-compatibility']
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.example.healthconnectsample'
}

dependencies {

    def composeBom = platform('androidx.compose:compose-bom:2024.09.03')
    implementation(composeBom)

    // For Health Connect
    implementation "androidx.health.connect:connect-client:$health_connect_version"

    // Fix permissions issue until 1.1.0-alpha02
    implementation "androidx.core:core:1.13.1"
    implementation "androidx.core:core-ktx:1.13.1"

    // For viewmodel support
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-compose:$navigation_compose_version"

    // To bridge between ListenableFuture and suspend functions
    implementation "androidx.concurrent:concurrent-futures-ktx:$concurrent_futures_version"

    // Icons
    implementation "androidx.compose.material:material-icons-extended"
    implementation "com.google.accompanist:accompanist-drawablepainter:0.36.0"

    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.material:material"
    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.activity:activity-compose:$activity_compose_version"

    debugImplementation "androidx.compose.ui:ui-tooling"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.1.2"
}
// ---------------------------
// Compliance / Domain-level check (demo)
// ---------------------------
// ---------------------------
// Compliance / Domain-level check (dynamic)
// ---------------------------
ext.complianceCheckEnabled = project.hasProperty('complianceCheckEnabled') ? project.property('complianceCheckEnabled').toBoolean() : true

task complianceCheck {
    description = "Run demo domain/compliance checks and fail the build on violations"
    group = "verification"

    doLast {
        if (!complianceCheckEnabled) {
            println "Compliance check: DISABLED (use -PcomplianceCheckEnabled=false to skip)"
            return
        }

        def errors = []
        def srcFiles = fileTree(dir: "src/main", include: ["**/*.kt", "**/*.java"])

        srcFiles.each { f ->
            def text = f.getText('UTF-8')

            // RULE 1: PatientData without encryption()
            if (text.contains("PatientData") && !text.contains("encrypt(")) {
                errors << "HIPAA: ${f.path} uses PatientData without encryption()"
            }

            // RULE 2: Negative steps literal
            if (text =~ /-\d+\s*steps/) {
                errors << "Domain: Negative steps literal found in ${f.path}"
            }

            // RULE 3: Hardcoded future timestamp
            if (text =~ /20[3-9]\d-\d{2}-\d{2}/) { // e.g., 2030-12-01
                errors << "Domain: Future timestamp literal found in ${f.path}"
            }
        }

        if (!errors.isEmpty()) {
            println "ðŸš¨ Compliance check FAILED (${errors.size()} issue(s))"
            errors.each { println "   - $it" }
            throw new GradleException("Compliance/domain errors found: " + errors.join("; "))
        } else {
            println "âœ… Compliance check passed"
        }
    }
}

preBuild.dependsOn complianceCheck
