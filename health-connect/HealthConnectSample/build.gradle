/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.9.25'
    ext {
        activity_compose_version = '1.9.2'
        hilt_navigation_compose_version = '1.0.0'
        navigation_compose_version = '2.8.2'

        concurrent_futures_version = '1.2.0'
        health_connect_version = '1.1.0-alpha12'
        lifecycle_version = '2.8.6'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.diffplug.spotless" version "6.25.0"
}

subprojects {
    apply plugin: "com.diffplug.spotless"
    spotless {
        kotlin {
            target "**/*.kt"
            targetExclude("$buildDir/**/*.kt")
            targetExclude("bin/**/*.kt")

            ktlint("0.41.0").userData(["max_line_length" : "100"])
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
            licenseHeaderFile rootProject.file("spotless/copyright.txt")
        }
    }
}
// ---------------------------
// Compliance / Domain-level check (demo)
// ---------------------------
ext.complianceCheckEnabled = project.hasProperty('complianceCheckEnabled') ? project.property('complianceCheckEnabled').toBoolean() : true

task complianceCheck {
    description = "Run demo domain/compliance checks and fail the build on violations"
    group = "verification"

    doLast {
        if (!complianceCheckEnabled) {
            println "Compliance check: DISABLED (use -PcomplianceCheckEnabled=false to skip)"
            return
        }

        def errors = []
        // scan relevant source files (java, kt, kotlin) under modules (app, feature modules, etc.)
        def srcFiles = fileTree(dir: ".", include: [
            "app/src/main/**/*.java",
            "app/src/main/**/*.kt",
            "**/src/main/**/*.java",
            "**/src/main/**/*.kt"
        ])

        srcFiles.each { f ->
            def text = f.getText('UTF-8')

            // RULE 1 (demo HIPAA): any use of "PatientData" without calling encrypt( -> flag
            if (text.contains("PatientData") && !text.contains("encrypt(")) {
                errors << "HIPAA: ${f.path} uses PatientData without encryption()"
            }

            // RULE 2 (demo domain): negative steps literal present
            

            def negativeSteps = ~/(?i)-\d+\s*steps\b|-steps\s*=\s*-\d+/
            if (text =~ negativeSteps) {
                errors << "Domain: Negative steps literal found in ${f.path}"
            }


            // RULE 3 (demo domain): future-dated literal ISO timestamp (quick heuristic)
            if (text =~ /20\\d{2}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\dZ/) {
                // optional: only flag if explicitly future compared to now? keep simple for demo
                errors << "Domain: Found timestamp literal (check for future timestamps) in ${f.path}"
            }
        }

        if (!errors.isEmpty()) {
            println "ðŸš¨ Compliance check FAILED (${errors.size()} issue(s))"
            errors.each { println "   - $it" }
            throw new GradleException("Compliance/domain errors found: " + errors.join("; "))
        } else {
            println "âœ… Compliance check passed"
        }
    }
}

// Attach complianceCheck to modules' lifecycle when available
gradle.projectsEvaluated {
    allprojects.each { p ->
        def preBuild = p.tasks.findByName('preBuild')
        if (preBuild != null) {
            preBuild.dependsOn complianceCheck
        } else {
            def checkTask = p.tasks.findByName('check')
            if (checkTask != null) {
                checkTask.dependsOn complianceCheck
            }
        }
    }
}
